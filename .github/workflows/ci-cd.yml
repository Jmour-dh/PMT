name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: pmt_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -uroot -proot" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ===== Backend (Spring Boot) =====
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Build Backend with Maven
        working-directory: ./Backend_PMT
        env:
          SPRING_PROFILES_ACTIVE: dev # Utilisez 'test' pour les tests
          MYSQL_DATABASE: pmt_db
        run: mvn clean package -DskipTests

      - name: Run Backend Tests
        working-directory: ./Backend_PMT
        env:
          SPRING_PROFILES_ACTIVE: test
          MYSQL_DATABASE: pmt_test
        run: mvn -Dtest="IntegrationTestSuite,AuthControllerTest,UserControllerTest,TaskHistoryControllerTest,TaskControllerTest,ProjectControllerTest,ProjectMemberControllerTest" test

      # ===== Frontend (Angular) =====
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Angular CLI
        working-directory: ./Frontend_PMT
        run: npm install -g @angular/cli

      - name: Install Frontend Dependencies
        working-directory: ./Frontend_PMT
        run: npm install

      - name: Run Frontend Tests
        working-directory: ./Frontend_PMT
        env:
          NODE_ENV: test
        run: ng test --watch=false --browsers=ChromeHeadless

      - name: Build Frontend
        working-directory: ./Frontend_PMT
        env:
          NODE_ENV: production
        run: ng build --configuration=production
      
      - name: Docker Login
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
    
      - name: Build and Push Docker Image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t dhiaeddinejm/spring-boot-profiles:latest .
          docker push dhiaeddinejm/spring-boot-profiles:latest